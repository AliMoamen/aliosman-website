import React, { useEffect, useRef, useState } from "react";
import Isotope from "isotope-layout";
import ProjectDetailsModal from "./ProjectDetailsModal";
const Portfolio = ({ classicHeader, darkTheme }) => {
  // init one ref to store the future isotope object
  const isotope = useRef();
  // store the filter keyword in a state
  const [filterKey, setFilterKey] = useState("*");
  const [imagesLoaded, setimagesLoaded] = useState(0);
  const [selectedProjectDetails, setSelectedProjectDetails] = useState();

  const filters = {
    WEB_APP: "Apps",
    AI: "AI",
  };

  const projectsData = [
    {
      title: "Dictionary Web App",
      projectInfo:
        "I developed a modern dictionary application using React, Sass, and TypeScript, featuring real-time data fetching from a dictionary API. The application includes key functionalities such as word search, dark mode, audio pronunciations, and font customization to enhance user experience.",
      technologies: "HTML5, CSS3, React, Typescript, Sass",
      url: {
        name: "dictionary-app-aosman",
        link: "https://dictionary-app-aosman.netlify.app/",
      },
      thumbImage: "images/projects/dictionary_app.png",
      sliderImages: [],
      categories: [filters["WEB_APP"]],
    },
    {
      title: "Relaxify Chatbot",
      projectInfo:
        "I utilized the GPT-4 API to build a therapist chatbot designed to promote positive mental health and provide resources for getting help. The chat user interface was deployed using HTML, CSS, Python, and Flask.",
      technologies: "HTML5, CSS3, Python, Flask",
      url: {
        name: "relaxify.onrender.com",
        link: "https://relaxify.onrender.com/",
      },
      thumbImage: "images/projects/relaxify_chatbot.png",
      sliderImages: [],
      categories: [filters["AI"]],
    },
    {
      title: "Beatalert",
      projectInfo:
        "I built a heart attack prediction model using the Support Vector Classifier algorithm, achieving 73% accuracy with key input features like age, gender, blood pressure, and heart rate. Additionally, I developed an intuitive user interface for easy input of health information, allowing users to access the predictive model.",
      technologies: "HTML5, CSS3, Python, Sklearn, Pandas, Flask",
      url: {
        name: "beatalert.onrender.com",
        link: "https://beatalert.onrender.com/",
      },
      thumbImage: "images/projects/beatalert.png",
      sliderImages: [],
      categories: [filters["AI"]],
    },
    {
      title: "Simon Game",
      projectInfo:
        "I coded an interactive Simon game web application, using the DOM to capture user click and keypress events. I implemented DOM-based animations to enhance the user's visual experience and added sound effects for each button. Additionally, I engineered JavaScript code to evaluate and compare user inputs with the color sequence generated by the game.",
      technologies: "HTML5, CSS3, Javascript",
      url: {
        name: "aliosman-simongame.onrender.com",
        link: "https://aliosman-simongame.onrender.com/",
      },
      thumbImage: "images/projects/simon_game.png",
      sliderImages: [],
      categories: [filters["WEB_APP"]],
    },
    {
      title: "Shortly",
      projectInfo:
        "I created a high-performance web application for shortening URLs using the Rebrandly API, ensuring the code was testable and maintainable. The front end was designed with the Bootstrap framework for responsiveness and the EJS templating language.",
      technologies: "HTML5, CSS3, Javascript, NodeJs, Bootstrap, EJS",
      url: {
        name: "shortly-kto6.onrender.com",
        link: "https://shortly-kto6.onrender.com/",
      },
      thumbImage: "images/projects/shortly.png",
      sliderImages: [],
      categories: [filters["WEB_APP"]],
    },
  ];

  // initialize an Isotope object with configs
  useEffect(() => {
    isotope.current = new Isotope(".portfolio-filter", {
      itemSelector: ".filter-item",
      layoutMode: "masonry",
    });

    // cleanup
    return () => {
      isotope.current.destroy();
    };
  }, []);

  // handling filter key change
  useEffect(() => {
    if (imagesLoaded) {
      filterKey === "*"
        ? isotope.current.arrange({ filter: `*` })
        : isotope.current.arrange({ filter: `.${filterKey}` });
    }
  }, [filterKey, imagesLoaded]);

  const handleFilterKeyChange = (key) => () => setFilterKey(key);

  return (
    <>
      <section
        id="portfolio"
        className={"section " + (darkTheme ? "bg-dark-2" : "bg-light")}
      >
        <div className={"container " + (classicHeader ? "" : "px-lg-5")}>
          {/* Heading */}
          <div className="position-relative d-flex text-center mb-5">
            <h2
              className={
                "text-24  text-uppercase fw-600 w-100 mb-0 " +
                (darkTheme ? "text-muted opacity-1" : "text-light opacity-4")
              }
            >
              Portfolio
            </h2>
            <p
              className={
                "text-9 text-dark fw-600 position-absolute w-100 align-self-center lh-base mb-0 " +
                (darkTheme ? "text-white" : "text-dark")
              }
            >
              {" "}
              My Work
              <span className="heading-separator-line border-bottom border-3 border-primary d-block mx-auto" />
            </p>
          </div>
          {/* Heading end*/}
          {/* Filter Menu */}
          <ul
            className={
              "portfolio-menu nav nav-tabs justify-content-center border-bottom-0 mb-5 " +
              (darkTheme ? "nav-light" : "")
            }
          >
            <li className="nav-item">
              <button
                className={"nav-link " + (filterKey === "*" ? "active" : "")}
                onClick={handleFilterKeyChange("*")}
              >
                All
              </button>
            </li>
            {Object.keys(filters).map((oneKey, i) => (
              <li className="nav-item" key={i}>
                <button
                  className={
                    "nav-link " +
                    (filterKey === filters[oneKey] ? "active" : "")
                  }
                  onClick={handleFilterKeyChange(filters[oneKey])}
                >
                  {filters[oneKey]}
                </button>
              </li>
            ))}
          </ul>
          {/* Filter Menu end */}
          <div className="portfolio popup-ajax-gallery">
            <div className="row portfolio-filter filter-container g-4">
              {projectsData.length > 0 &&
                projectsData.map((project, index) => (
                  <div
                    className={
                      "col-sm-6 col-lg-4 filter-item " +
                      project.categories.join(" ")
                    }
                    key={index}
                  >
                    <div className="portfolio-box rounded">
                      <div className="portfolio-img rounded">
                        <img
                          onLoad={() => {
                            setimagesLoaded(imagesLoaded + 1);
                          }}
                          className="img-fluid d-block portfolio-image"
                          src={project.thumbImage}
                          alt=""
                        />
                        <div className="portfolio-overlay">
                          <a
                            className="popup-ajax stretched-link"
                            onClick={() => {
                              setSelectedProjectDetails(projectsData[index]);
                            }}
                            data-bs-toggle="modal"
                            data-bs-target="#exampleModal"
                          />
                          <div className="portfolio-overlay-details">
                            <h5 className="text-white fw-400">
                              {project.title}
                            </h5>
                            <span className="text-light">
                              {project.categories[0]}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
            </div>
          </div>
        </div>
      </section>
      <div className="project-details-modal">
        {/* Modal */}
        <ProjectDetailsModal
          projectDetails={selectedProjectDetails}
          darkTheme={darkTheme}
        ></ProjectDetailsModal>
      </div>
    </>
  );
};

export default Portfolio;
